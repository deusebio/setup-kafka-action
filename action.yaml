# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.

# Usage documentation: build_charm.md
---
name: "Charmed Kafka Setup"
description: "Creates a Kafka deployment for integration testing"
author: "Canonical"

branding:
  icon: "alert-circle"
  color: "purple"

inputs:
  broker-units:
    description: Number of Kafka broker to be used
    default: "1"
    required: false
  zookeeper-units:
    description: Number of ZooKeeper servers to be used
    default: "1"
    required: false
  topic:
    description: Name for the requested topic
    default: "test-topic"
    required: false
  user-roles:
    description: Role for the user to be created
    default: "admin"
    required: false
  encryption:
    type: bool
    description: Whether encryption shall be enabled
    default: false
    required: false
  substrate:
    description: |
      "Which substrate to use to deploy juju and charms. Options: lxd, microk8s"
    default: lxd
    required: false
  model:
    description: Name of the Juju model where to deploy the cluster
    default: "kafka"
    required: false


outputs:
  bootstrap-server:
    description: Address for the bootstrap server to be used
    value: ${{ steps.outputs.outputs.bootstrap-server }}
  username:
    description: Admin user created in the Kafka cluster for external use
    value: ${{ steps.outputs.outputs.username }}
  password:
    description: Password for the admin user
    value: ${{ steps.outputs.outputs.password }}
  ca-certificate:
    description: Certificate of the CA issuing the Kafka broker certificates
    value: ${{ steps.outputs.outputs.ca-certificates }}

runs:
  using: composite
  steps:

    # - name: Setup operator environment
    #   if: ${{ env.CONTROLLER_NAME == '' }}
    #   uses: charmed-kubernetes/actions-operator@main
    #   with:
    #     provider: ${{ inputs.substrate }}
    #     channel: ${{ inputs.substrate == 'microk8s' &&  '1.30-strict/stable' || '' }}
    #     juju-channel: 3.5/stable
    #     bootstrap-options: "--agent-version 3.5.3"

    - name: Deploy Kafka
      id: deploy
      shell: bash
      run: |
        pip install jinja2-cli

        # juju add-model ${{ inputs.model }}

        cd ${{ github.action_path }}

        if [ ${{ inputs.encryption }} == "false" ];
        then
          ENCRYPTION="false"
        else
          ENCRYPTION="true"
        fi

        if [ ${{ inputs.substrate }} == "lxd" ];
        then
          BUNDLE_FILE="bundle.yaml.j2"
        else
          BUNDLE_FILE="bundle.k8s.yaml.j2"
        fi

        echo "Using template: ${BUNDLE_FILE}"

        cat ./resources/$BUNDLE_FILE

        jinja2 \
          -D tls=${ENCRYPTION} \
          -D num_brokers=${{ inputs.broker-units }} \
          -D num_zk_servers=${{ inputs.zookeeper-units }} \
          -D user_roles=${{ inputs.user-roles }} \
          -D topic_name=${{ inputs.topic }} \
          ./resources/$BUNDLE_FILE > bundle.yaml

        echo jinja2 \
          -D tls=${ENCRYPTION} \
          -D num_brokers=${{ inputs.broker-units }} \
          -D num_zk_servers=${{ inputs.zookeeper-units }} \
          -D user_roles=${{ inputs.user-roles }} \
          -D topic_name=${{ inputs.topic }} \
          ./resources/$BUNDLE_FILE
        
        echo "Here"
        cat bundle.yaml

        # juju deploy ./bundle.yaml
        # juju wait-for application kafka --query='name=="kafka" && (status=="active" || status=="idle")' --timeout 30m0s
        # juju wait-for application user --query='name=="user" && (status=="active" || status=="idle")' --timeout 30m0s

    # - name: Fetch output variables
    #   id: outputs
    #   shell: bash
    #   run: |
    #     juju run user/leader get-credentials --format plain > outputs.yaml
    #     cat outputs.yaml
    #     echo "bootstrap-server=$(yq '.kafka.endpoints' outputs.yaml)" >> $GITHUB_OUTPUT
    #     echo "username=$(yq '.kafka.username' outputs.yaml)" >> $GITHUB_OUTPUT
    #     echo "password=$(yq '.kafka.password' outputs.yaml)" >> $GITHUB_OUTPUT
    #
    #     if [ ${{ inputs.encryption }} == "true" ];
    #     then
    #       juju run tls/0 get-ca-certificate --format plain > outputs.yaml
    #       CA=$(yq '.ca-certificate' outputs.yaml | awk -v ORS='\\n' '1')
    #       echo "ca-certificate=\"${CA}\""
    #       echo "ca-certificate=\"${CA}\"" >> $GITHUB_OUTPUT
    #     else
    #       echo "ca-certificate=\"\"" >> $GITHUB_OUTPUT
    #     fi
